자바스크립트

'작은 따옴표'
"큰 따옴표"
'template literal'

let 은 변수, 변수를 만들어서 개발자가 원하는 값으로 맞춤

ctrl+shift+I를 누르면 html 웹페이지 안의 console 에서 javascript 프로그램이 돈다

오해를 많이 받지만 각광을 받는 어플리케이션에 많이 사용되는 언어
2008년 9년 구글 크롬 발표
2009.01 이후 자바스크립트 웹 브라우저가 아닌 곳에서도 사용할 수 있는 표준안 제시
commonJS표준 발표 이후 V8 엔진과 같이 사용
C language 잘하는 사람은 잘할 수 있는 여건이 됨

비동기적인 방식
보통의 프로그래밍은 top down으로 흘러감
함수1() 호출
함수2() 호출
함수3() 호출 => 이런식으로
통상적으로 동기적(다른 일을 못하고 하나만 가능)으로 흘러감
자바스크립트는 I/O가 걸려잇는 함수들 (파일 엑세스 다른 서버랑 커뮤니케이션 디비 엑세스한다던지)
동시 다발적, 어떤게 먼저 끝날지는 모르는게 자바스크립트 

I/O = I/O는 입력(Input)/출력(Output)의 약자로, 컴퓨터 및 주변장치에 대하여 
데이터를 전송하는 프로그램, 운영 혹은 장치를 일컫는 말입니다. 
대개의 경우 입력에 함께 출력이 발생하게 됩니다. 
단, 키보드와 마우스처럼 입력을 위한 기기, 
프린터처럼 출력에만 사용되는 기기도 있습니다. 
프로세서와 메모리, 확장 슬롯, 마더보드에서 일어나는 데이터 전송도 I/O라고 일컬어집니다.

효율적임 하지만 비동기적이라 프로그램만들기 어려움
탑다운을 방지하기 위해서 자바스크립트는 콜백을 써서 함수1안에 함수 2를 넣고 함수 3를 써서 입력함
어띤크 어웨이크 위에서 아래로 흐르는 것처럼 만들 수 있음 처음하는 사람은 난해함
a think awake

javascript로 백앤드를 하려면 promise화 시키는 것을 자바스크립트의 핵심 기술임
core tech임

thread : 효율적인 비동기 방식으로 장보기를 프로그래밍 언어로 구현하는 방법
node.js 모든 모듈 라이브러리 처음부터 비동기 기반의 프로그램을 만들 수 있도록 설계되어 초보자도 쉽게 프로그램을 만들 수 있음

thread를 maximum으로 활용해야하기 때문에 게임만드는 것이 힘든것임
-> 코드가 어려워짐





2.자바스크립트로 할 수 있는 일

웹 클라이언트 애플리케이션 개발
애플리케이션 개발 목적

웹 서버 개발

2가지 이상의 언어가 사용

모바일 애플리케이션
네이티브 애플리케이션
페이스북의 리액트 내이티브

데스크톱 애플리케이션 개발 
electron모듈

데이터베이스 관리











3.프로그래밍 입문

목표

자바스크립트 기본 용어 이해
기본 출력방법
자료 변수 상수 함수
자료형 변환 방법












03.자료형.js
자료형
1. 컴퓨터는 2진수로 사용함 (all things)
때에 따라 숫자 문자로 읽는 작업을 함
so, 구분을 위해서 자료형이라는 것을 사용함
0x41 = A (16진수)
0100 0001 (10진수) = 64 + 1 = 65(정수) => 문자열로 읽으면 A가 됨
컴퓨터가 어떻게 해석할 것인가에 따라서 내용이 달라짐
데이타 타입이라는 자료형이 생김
자바스크립트는 타입이 없다
니가 쓰는데로 맞춰서 해주겠다 -> 자바스크립트
이러한 랭귀지가 사용은 쉬운데 실제로 프로그램 실행 순간에 예상하지 못한 문제 발생함
so, 자바스크립트의 자유분방함을 진정시키는 type script가 나옴






2. 풀스텍 calss
강의장 밖에서 반을 물으면 풀스텍 반이요라고 대답할 수 있음 
=> 이 말은, 카테고리를 묶어줌 = 데이타 하나가 아니라 데이터 여러개를 묶어줌
묶음의 프로그래밍을 잘해야함
데이타가 개별적으로 있는 것은 어렵지 않음
계산기와 다를바 없음
묶음의 데이터를 활용해서 어떻게 프로그래밍 할것인가가 중요함!! 이것을 잘해야함!!


modulo : 모듈로가 로직의 아주 중요한 역할
어떤 식에서 3의 배수를 찾으라고 할 때
3의 배수가 모듈러 3을 한 것의 나머지가 0이면 됨
짝수를 찾으라고 하면 모듈로로 2로 나눠서 나머지가 1인 것을 찾으면 됨

cls clear script
정리하다 (cmd 에서 썼던거 다 지워줌)


바이트 쇼트 인트 롱 싱글 더블 6개 타입이 자바스크립트에서는 하나로 쓰임

자바를 해서 엄격한 사람들은 자바스크립트 랭귀지

자바 스크립트: 엔진이 하나하나 해석해서 실행

자바: 전부다 기계어로 프로그램을 만들어놓고 한번에 실행



2. 문자

alt+shift+a = 주석 /**/ 여러줄에 걸친 주석
한줄 주석 //


console.log("he said \"I love you.\""); 문자열 escaping을 피하는 법

let hello = '안녕하세요?';
console.log(hello[0], hello[2], hello[5]);      //안 하 ?


문자와 숫자 부호를 같이 사용하는 일이 자주 있을 것

// template literal
let a = 2, b = 3;
console.log(a, '더하기', b, '은', 2 + 3, '입니다');
console.log(`${a} 더하기 ${b}은 ${a+b} 입니다.`);

=> 템플릿 리터럴의 장점
쉼표를 계속해서 찍는 불편함을 해소해줌.
so, 공식을 만들어 사용함.

console.log(`올해는 ${new Date().getFullYear()}년입니다.`);

명령프롬프트 내에서 실행되는 화면 (이하)

C:\workspace\WebProject\03.javascript\ch02.기본>node 03.자료형.js
he said "I love you."
I'll be back.
he said "I love you."
Back slash(\) 기호를 사용할 때에는 \ 두개를 쓰면 됩니다.
안 하 ?
2 더하기 3 은 5 입니다
2 더하기 3은 5 입니다.
올해는 2024년입니다.




getFullYear도 작명할 때 약속임
단어를 두개를 붙여함
하나로 만들기 위해서
1. snake style
full_year 뱀이 기어가는 것을 형상화 (파이썬)

2. 자바 , 자바 스크립트
FullYear 막타 canal case

게터 섹터
getter sector 값을 가지고 오고 싶으면 method나 getter를 써서 가져옴


identifire
아이덴티 파이어(식별자)는 소문자로 시작함 (통상적으로)
대문자 딱 하나 Class만 대문자로 시작함


논리형 (boolean)
컴퓨터가 잘하는 것은 조건을 fix 시켜서 동일한 결과가 나옴 사람은 못함
반복문을 잘한다
프로그램을 한다는 것을 조건문과 반복문을 얼마나 잘하냐 차이다

A+B+C=1000 피타고라스 수

단, a가 < b < c
직각삼각형의 세변을 찾아라 라는 문제

일일이 값을 다 대답을 투입을 해서 풀어야함 = 사람

경우의 수를 조건문으로 만드러서 당정식을 푸는게 아니라
조건을 찾아 모든 경우의 수를 입력해서 속도가 빨라서 고민할 이유가 없게된다

참과 거짓을 나타낼 때 논리형을 이야기한다.

console.log(typeof(true), typeof(false));
자바 트루가 소문자
파이썬 트루가 대문자

console.log(typeof(true), typeof(false));
sql 에서는 이퀄

! = not의 의미

let x = 10;
|| or 논리연산자 ||
&&(and), 8 < x < 

true 1 false 0
if문 조건문 조건문은 boolean 

조건문에 들어가는 내용이 몇가지가 있다
false가 되는 경우 0
아무런 데이터가 없는 빈 string 
undefined => false
값이 있으면 true로 취급을 함

참인지 거짓인지 따지고 싶을 때 
숫자값이 나오면 그것은 true임
오로지 0일 때만 false임

문자열도 아무런 데이터가 없는 경우만 false임



깃허브에 올릴 때

소스제어 누름
세번 플러스를 누르거나
changes에 가면 3가지를 한꺼번에 올려놓게됨
커밋을 누름
변경 내용 동기화 누름

*!!!*스페이스는 페이지 넘김
Q를 누르면 빠져나올 수 있음

04.변수.js
// 식별자(identifier)
//      1. 영문자, 숫자, $, _ (언더바까지 사용가능)
//      2. 대소문자 구분
//      3. 숫자로 시작하면 안됨
//      4. 예약어(keyword) 사용금지
//      5. 단어 여러개 사용하는 것을 권장 - 이럴 경우 camel style로 한 단어를 만들 것
//      6. 변수, 상수, 함수명 등은 소문자로 시작
//      7. 클래스 명은 대문자로 시작

//      변수(variable)
let pi = 3.1415926535;      //신식
var radius = 10;            //구식 (과거 프로그래머가 써놓은 코드일 수 있음)



복합 대입 연산자

post는 ~~다음 이라는 뜻

변수 뒤: post-increment 감소시키고 (x++, ++y) 
변수 앞: pre-increment 찍고 (x--, --y

//나머지 자료형
// 4. 함수(function)
console.log(typeof function() {});
console.log(typeof(() => {}));      //화살표(arrow) 함수, 람다 함수, 익명 함수

// 5. 객체타입(object)
let obj = {x: 1, y:2}; // 키(x), 밸류(y) 쌍을 오브젝트라고 한다
console.log(typeof obj);
console.log(obj.x, obj.y);

//6. undefined
let alpha;
console.log(typeof alpha, typeof beta); 선언하지 않은 변수, 초기화하지 않은 변수

파이썬은 변수선언하지 않고 사용함
자바스크립트는 선언해야함


05.변환js
// 자료형 변환
// 강제 변환
console.log(123, string(123));
console.log(Number('101'), Number(true), Number(false));
console.log(Number('hello'));       //NaN, Not a Number

숫자는 red
입력값은 파랑
기본글자는 검정

// 아래 경우를 제외하면 모두 참(true)
console.log(Boolean(0), Boolean(0.0), Boolean(''), Boolean(undefined), Boolean(null), Boolean(NaN));

Boolean 스페이스 하면 트루임 조심할 것!!
널도 거짓
nan false임

//자동 변환
// + 연산자 : Boolean -> Number -> string 갈수록 큰 것을 표현하는 쪽으로 감






"컴퓨터의 -" 는 주판의 개념에서 가져옴

5라는 값은ㄹ 4자리로 표현 

5 = 0101
3 = 0011

2의 보수는 어떻게 만들까?


-3은 1과 0을 뒤집는다 1100 2의 보수기 때문에 1을 더해준다. 1101이 된다.

5-3 0101
    1101 을 더해준다  2의 보수(complement)
  1 0010 이 된다
1이라는 숫자를 없애면

0010 = 2가 된다


곱하기는 어떻게 할까?
10진수에서 곱하기 10을 하면 뒤에 0하나 붙음
2진수에서 0을 곱하면 0
shift하면 나눠짐



'변수'라는 것은 메모리 상에 어떠한 값을 넣는 것임
a라는 변수가 10이라는 값을 가지고 있으면 2진수로 표현될 것
if a 가 const인데 바꾸려고하면 에러남
obj 는 주소가 들어가있다
obj 는 어딘가에 있는 다른 주소를 참조해서 obj.x는 다른 주소에 x라는 값에 들어가있는 변수를 가져와서 참조형이라고 한다.



let이나 var 대신에 const 쓸 때가 있음 참조형으로 쓰면 가능하기 때문임
콘솔 불린 변수형
함수 오브젝트는 참조형

참조형변수는 자바에서도 그대로 나옴
프로그래밍을 어렵게 하는 요소가 된다
복잡도가 증가할수록 힘들지만 생각해내서 극복해내야한다.

































